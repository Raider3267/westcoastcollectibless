'use client'

import { useState, useEffect } from 'react'
import { Listing } from '../lib/listings'
import ProductCard from './ProductCard'

interface RelatedProductsProps {
  currentProduct: Listing
  allProducts: Listing[]
}

interface Bundle {
  id: string
  name: string
  products: Listing[]
  discount: number
  originalPrice: number
  bundlePrice: number
}

export default function RelatedProducts({ currentProduct, allProducts }: RelatedProductsProps) {
  const [relatedProducts, setRelatedProducts] = useState<Listing[]>([])
  const [suggestedBundles, setSuggestedBundles] = useState<Bundle[]>([])

  useEffect(() => {
    // Find related products based on various criteria
    const findRelatedProducts = () => {
      const related: Listing[] = []
      
      // Extract brand/series from current product name
      const currentBrand = extractBrand(currentProduct.name)
      const currentSeries = extractSeries(currentProduct.name)
      
      allProducts.forEach(product => {
        if (product.id === currentProduct.id) return
        
        const productBrand = extractBrand(product.name)
        const productSeries = extractSeries(product.name)
        
        let relevanceScore = 0
        
        // Same brand/series gets highest score
        if (currentBrand && productBrand === currentBrand) relevanceScore += 10
        if (currentSeries && productSeries === currentSeries) relevanceScore += 8
        
        // Similar price range
        if (currentProduct.price && product.price) {
          const priceDiff = Math.abs(currentProduct.price - product.price)
          if (priceDiff < 20) relevanceScore += 5
          else if (priceDiff < 50) relevanceScore += 3
        }
        
        // Similar keywords in name/description
        const currentKeywords = extractKeywords(currentProduct.name + ' ' + (currentProduct.description || ''))\n        const productKeywords = extractKeywords(product.name + ' ' + (product.description || ''))\n        const commonKeywords = currentKeywords.filter(k => productKeywords.includes(k))\n        relevanceScore += commonKeywords.length * 2\n        \n        if (relevanceScore > 3) {\n          related.push({ ...product, relevanceScore } as Listing & { relevanceScore: number })\n        }\n      })\n      \n      // Sort by relevance and take top 6\n      return related\n        .sort((a, b) => (b as any).relevanceScore - (a as any).relevanceScore)\n        .slice(0, 6)\n    }\n    \n    // Generate bundle suggestions\n    const generateBundles = (related: Listing[]) => {\n      const bundles: Bundle[] = []\n      \n      // Create \"Complete the Set\" bundle\n      const sameSeriesProducts = related.filter(p => \n        extractSeries(p.name) === extractSeries(currentProduct.name)\n      ).slice(0, 3)\n      \n      if (sameSeriesProducts.length >= 2) {\n        const bundleProducts = [currentProduct, ...sameSeriesProducts]\n        const originalPrice = bundleProducts.reduce((sum, p) => sum + (p.price || 0), 0)\n        const discount = 15 // 15% discount\n        const bundlePrice = originalPrice * (1 - discount / 100)\n        \n        bundles.push({\n          id: 'complete-set',\n          name: `Complete the ${extractSeries(currentProduct.name) || 'Collection'} Set`,\n          products: bundleProducts,\n          discount,\n          originalPrice,\n          bundlePrice\n        })\n      }\n      \n      // Create \"Collector's Choice\" bundle\n      const collectorBundle = related.slice(0, 2)\n      if (collectorBundle.length === 2) {\n        const bundleProducts = [currentProduct, ...collectorBundle]\n        const originalPrice = bundleProducts.reduce((sum, p) => sum + (p.price || 0), 0)\n        const discount = 10 // 10% discount\n        const bundlePrice = originalPrice * (1 - discount / 100)\n        \n        bundles.push({\n          id: 'collectors-choice',\n          name: \"Collector's Choice Bundle\",\n          products: bundleProducts,\n          discount,\n          originalPrice,\n          bundlePrice\n        })\n      }\n      \n      return bundles\n    }\n    \n    const related = findRelatedProducts()\n    setRelatedProducts(related)\n    setSuggestedBundles(generateBundles(related))\n  }, [currentProduct, allProducts])\n  \n  const extractBrand = (name: string): string => {\n    const brands = ['POP MART', 'Labubu', 'Skullpanda', 'MOLLY', 'DIMOO', 'Crybaby']\n    for (const brand of brands) {\n      if (name.toLowerCase().includes(brand.toLowerCase())) {\n        return brand\n      }\n    }\n    return name.split(' ')[0] || ''\n  }\n  \n  const extractSeries = (name: string): string => {\n    const series = ['fairy tale', 'space', 'halloween', 'christmas', 'summer', 'winter']\n    for (const s of series) {\n      if (name.toLowerCase().includes(s)) {\n        return s\n      }\n    }\n    return ''\n  }\n  \n  const extractKeywords = (text: string): string[] => {\n    return text.toLowerCase()\n      .split(/[\\s,.-]+/)\n      .filter(word => word.length > 2 && !['the', 'and', 'for', 'with'].includes(word))\n  }\n  \n  const cardColors = [\n    'from-pop-pink/20 to-pop-orange/20',\n    'from-pop-teal/20 to-pop-blue/20', \n    'from-pop-lime/20 to-pop-yellow/20',\n    'from-pop-purple/20 to-pop-pink/20',\n    'from-pop-orange/20 to-pop-teal/20',\n    'from-pop-blue/20 to-pop-purple/20'\n  ]\n  \n  if (relatedProducts.length === 0 && suggestedBundles.length === 0) {\n    return null\n  }\n  \n  return (\n    <section className=\"luxury-section\" style={{ \n      background: 'linear-gradient(135deg, rgba(199,163,255,.08) 0%, rgba(94,208,192,.08) 50%, rgba(247,231,195,.08) 100%)',\n      position: 'relative',\n      overflow: 'hidden'\n    }}>\n      {/* Background decoration */}\n      <div style={{\n        position: 'absolute',\n        top: '-20%',\n        left: '-10%',\n        width: '40%',\n        height: '140%',\n        background: 'radial-gradient(circle, rgba(247,231,195,.1) 0%, transparent 70%)',\n        borderRadius: '50%',\n        filter: 'blur(60px)'\n      }} />\n      \n      <div style={{ maxWidth: '1224px', margin: '0 auto', padding: '0 20px', position: 'relative', zIndex: 2 }}>\n        {/* Bundle Suggestions */}\n        {suggestedBundles.length > 0 && (\n          <div style={{ marginBottom: '48px' }}>\n            <div className=\"luxury-eyebrow\" style={{ marginBottom: '16px' }}>Special Offers</div>\n            <h2 style={{ \n              fontSize: 'clamp(1.6rem, 2.5vw, 2rem)', \n              margin: '0 0 24px', \n              fontWeight: 800,\n              color: 'var(--ink)'\n            }}>\n              üéÅ Bundle & Save\n            </h2>\n            \n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))', gap: '20px' }}>\n              {suggestedBundles.map(bundle => (\n                <div key={bundle.id} className=\"luxury-card accent-gold\" style={{ padding: '24px' }}>\n                  <div style={{ marginBottom: '16px' }}>\n                    <h3 style={{ fontSize: '1.3rem', fontWeight: 800, color: 'var(--ink)', marginBottom: '8px' }}>\n                      {bundle.name}\n                    </h3>\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '12px' }}>\n                      <span style={{ \n                        fontSize: '1.1rem', \n                        fontWeight: 800, \n                        color: '#ff8b2a' \n                      }}>\n                        ${bundle.bundlePrice.toFixed(2)}\n                      </span>\n                      <span style={{ \n                        fontSize: '0.9rem', \n                        color: 'var(--muted)', \n                        textDecoration: 'line-through' \n                      }}>\n                        ${bundle.originalPrice.toFixed(2)}\n                      </span>\n                      <span style={{\n                        padding: '2px 8px',\n                        background: 'linear-gradient(135deg, #4CAF50, #8BC34A)',\n                        color: 'white',\n                        borderRadius: '999px',\n                        fontSize: '0.8rem',\n                        fontWeight: 600\n                      }}>\n                        Save {bundle.discount}%\n                      </span>\n                    </div>\n                    <p style={{ fontSize: '0.9rem', color: 'var(--muted)', marginBottom: '16px' }}>\n                      Get {bundle.products.length} items together and save ${(bundle.originalPrice - bundle.bundlePrice).toFixed(2)}!\n                    </p>\n                  </div>\n                  \n                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(60px, 1fr))', gap: '8px', marginBottom: '16px' }}>\n                    {bundle.products.map((product, index) => (\n                      <div key={product.id} style={{ textAlign: 'center' }}>\n                        <div style={{\n                          width: '60px',\n                          height: '60px',\n                          borderRadius: '8px',\n                          background: product.image ? `url(${product.image})` : 'linear-gradient(135deg, #f0f0f0, #e0e0e0)',\n                          backgroundSize: 'cover',\n                          backgroundPosition: 'center',\n                          margin: '0 auto 4px',\n                          border: product.id === currentProduct.id ? '2px solid var(--accent-teal)' : '1px solid var(--line)'\n                        }} />\n                        <div style={{ fontSize: '0.7rem', color: 'var(--muted)' }}>\n                          {product.name.length > 12 ? product.name.substring(0, 12) + '...' : product.name}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <button\n                    className=\"luxury-btn grad\"\n                    style={{\n                      width: '100%',\n                      padding: '12px 20px',\n                      fontSize: '1rem',\n                      fontWeight: 600,\n                      borderRadius: '999px',\n                      border: 'none',\n                      background: 'linear-gradient(135deg, var(--accent-gold), var(--accent-teal))',\n                      color: '#0b0b0f',\n                      cursor: 'pointer',\n                      transition: 'all 0.3s ease'\n                    }}\n                    onMouseEnter={(e) => e.currentTarget.style.transform = 'translateY(-2px)'}\n                    onMouseLeave={(e) => e.currentTarget.style.transform = 'translateY(0)'}\n                  >\n                    üõí Add Bundle to Cart\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        {/* Related Products */}\n        {relatedProducts.length > 0 && (\n          <div>\n            <div className=\"luxury-eyebrow\" style={{ marginBottom: '16px' }}>You Might Also Like</div>\n            <h2 style={{ \n              fontSize: 'clamp(1.6rem, 2.5vw, 2rem)', \n              margin: '0 0 24px', \n              fontWeight: 800,\n              color: 'var(--ink)'\n            }}>\n              üîç Collectors Also Viewed\n            </h2>\n            \n            <div className=\"luxury-grid wcc-scroll\">\n              {relatedProducts.map((product, index) => {\n                const cardColor = cardColors[index % cardColors.length]\n                const toyEmojis = ['üß∏', 'üé®', 'üé™', 'üé≠', 'üé≤', 'üöÄ', 'üåü', 'üíé', 'üéØ', '‚≠ê']\n                const randomEmoji = toyEmojis[index % toyEmojis.length]\n                \n                return (\n                  <ProductCard\n                    key={product.id}\n                    product={product}\n                    cardColor={cardColor}\n                    randomEmoji={randomEmoji}\n                  />\n                )\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </section>\n  )\n}