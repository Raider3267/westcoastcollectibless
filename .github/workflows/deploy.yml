name: Deploy to Vercel

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Phase 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm tsc --noEmit

      - name: Lint code
        run: pnpm lint

  # Phase 2: Deploy to Vercel
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always() && needs.build-and-test.result == 'success'
    
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
      production-url: ${{ steps.deploy.outputs.production-url }}
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Production deployment
            URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
            echo "production-url=$URL" >> $GITHUB_OUTPUT
            echo "deployment-url=$URL" >> $GITHUB_OUTPUT
            echo "üöÄ **Production Deployment Successful!**" >> $GITHUB_STEP_SUMMARY
            echo "Production URL: $URL" >> $GITHUB_STEP_SUMMARY
          else
            # Preview deployment
            URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
            echo "preview-url=$URL" >> $GITHUB_OUTPUT
            echo "deployment-url=$URL" >> $GITHUB_OUTPUT
            echo "üîç **Preview Deployment Successful!**" >> $GITHUB_STEP_SUMMARY
            echo "Preview URL: $URL" >> $GITHUB_STEP_SUMMARY
          fi

  # Phase 3: Health Check and Smoke Tests
  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for deployment propagation
        run: sleep 45

      - name: Run comprehensive smoke tests
        env:
          DEPLOYMENT_URL: ${{ needs.deploy.outputs.deployment-url }}
          TEST_TIMEOUT: 45000
        run: node scripts/smoke.mjs

      - name: Production deployment validation
        if: github.ref == 'refs/heads/main'
        env:
          DEPLOYMENT_URL: ${{ needs.deploy.outputs.production-url }}
        run: |
          echo "üîç Running additional production validation..."
          
          # Check core pages load within 3 seconds
          curl -w "@/dev/stdin" -s -o /dev/null "$DEPLOYMENT_URL" <<< "time_total: %{time_total}" | \
          awk '{if ($2 > 3.0) {print "‚ùå Homepage load time too slow:", $2 "s"; exit 1} else {print "‚úÖ Homepage loads in", $2 "s"}}'
          
          # Verify no dev/debug content in production
          CONTENT=$(curl -s "$DEPLOYMENT_URL")
          if echo "$CONTENT" | grep -qi "development\|localhost\|debug"; then
            echo "‚ùå Development content found in production"
            exit 1
          else
            echo "‚úÖ No development content in production"
          fi
          
          # Check robots.txt accessibility
          curl -f -s "$DEPLOYMENT_URL/robots.txt" > /dev/null && echo "‚úÖ robots.txt accessible" || echo "‚ö†Ô∏è robots.txt not found"

      - name: Update deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "‚úÖ **All Health Checks Passed**" >> $GITHUB_STEP_SUMMARY
            echo "- Smoke tests completed successfully" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "- Production validation completed" >> $GITHUB_STEP_SUMMARY
              echo "- Performance benchmarks met" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå **Health Checks Failed**" >> $GITHUB_STEP_SUMMARY
            echo "- Deployment may have issues - investigate before proceeding" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "‚ö†Ô∏è **PRODUCTION DEPLOYMENT REQUIRES ATTENTION**" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  # Phase 4: Post-deployment notifications (PR comments)
  notify:
    needs: [deploy, health-check]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.deploy.result == 'success'
    
    steps:
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üöÄ Preview Deployment')
            );
            
            const healthStatus = '${{ needs.health-check.result }}' === 'success' ? '‚úÖ Passed' : '‚ùå Failed';
            const previewUrl = '${{ needs.deploy.outputs.preview-url }}' || '${{ needs.deploy.outputs.deployment-url }}';
            
            const body = `## üöÄ Preview Deployment Ready!
            
            **Preview URL:** ${previewUrl}
            **Health Checks:** ${healthStatus}
            
            ### üß™ Test Checklist
            - [ ] Authentication flow works correctly
            - [ ] Product listings load properly  
            - [ ] Cart functionality operates
            - [ ] Admin panel accessible (for admin users)
            - [ ] Payment integration functional
            - [ ] Mobile responsiveness verified
            
            ### üìä Performance
            - Build completed successfully
            - All type checks passed
            - Linting completed without errors
            
            ---
            *This preview will be automatically updated when you push new commits to this PR.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }